const mongoose = require('mongoose');
const faker = require('faker')
const Account = require('./models/account');
const Case = require('./models/case');
const User = require('./models/user');
const Message = require('./models/message');
const AccountOverview = require('./models/accountOverview');

const ObjectId = require('mongodb').ObjectID;

const options = {
  poolSize: 200
}
 
mongoose.connect('mongodb://localhost/mjraybk07ServiceDev', options); // TODO
 
const db = mongoose.connection;

db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', () => console.log('mongoose db connection open..'));


// ---- Account Overviews  -----


const saveAccountOverview = (data, callback) => {
  console.log('Saving account overview..');
  
  // ??????????? not sure this is correct
  new AccountOverview(data).save( (err, accountOverviewEntry) => {
    if (err) {
      callback(err, null);
    } else {
      console.log('new account overview saved to db: ', accountOverviewEntry)
      callback(null, accountOverviewEntry);
      
    }
  })
  
}

const getAllAccountOverviews = (callback) => {
  console.log('Getting all account overviews')
  
  AccountOverview.find( (err, accountOverviews) => {
    if (err) {
      callback(err, null)
    } else {
      callback(null, accountOverviews)
    }
  })
}

//  ---- Accounts ----

const getAllAccountIds = (callback) => {
  console.log('getting all account ids')
  
  Account.find( (err, accounts) => {
    if (err) {
      callback(err, null)
    } else {
      var arr = accounts.map( (account)=> {
        return account._id;
      })
      callback(null, arr)
    }
  })
}


const getAccountById = (accountId, callback) => {
  console.log(`Getting account by account id: ${accountId}`);
  
  accountId = ObjectId(accountId);
  
  Account.find({_id: accountId}, (err, account) => {
    if ( err ) {
      callback(err, null)
    } else {
      callback(null, account);
      console.log(`Done getting account by account id: ${accountId}`)
    }
  })
  
  
}



//  --- Cases ---


const getCasesByAccountId = (accountId, callback) => {
  console.log(`Getting cases by account id: ${accountId}`)
  
  accountId = ObjectId(accountId) // format string to objectId for mongo db
 
  let casesArr = [];

  Case.
  find({account_id: accountId}).
  cursor().
  on('data', (result) => {
    casesArr.push(result)    
  }).
  on('error', (error) => {
    callback(error, null)
  }).
  on('end', () => {    
    console.log(`Done streaming cases for account id: ${accountId}`)
    callback(null, casesArr)
   })

}

// --- Users ---

const getUsersByAccountId = (accountId, callback) => {
  console.log(`Getting users by account id: ${accountId}`);
  
  accountId = ObjectId(accountId);
  
  let usersArr = [];
  
  User.
  find({account_id: accountId}).
  cursor().
  on('data', (user) => {
    usersArr.push(user)
  }).
  on('error', (error) => {
    callback(error, null)
  }).
  on('end', () => {
    console.log(`Done streaming users for account id: ${accountId}`);
    callback(null, usersArr);
  })
   
}


const getMessagesByAccountId = (accountId, callback) => {
  console.log(`Getting messages by account id: ${accountId}`);
  
  accountId = ObjectId(accountId);
  
  let messagesArr = [];
  
  // TODO INCORRECT ......... get cases first, for caseId and get accountId
  
  Message.
  find({account_id: accountId}).
  cursor().
  on('data', (message) => {
    messagesArr.push(message)
  }).
  on('error', (error) => {
    callback(error, null)
  }).
  on('end', () => {
    console.log(`Done streaming messages for account id: ${accountId}`);
    callback(null, messagesArr);
  })
  
  
}


const getAccountOverviewById = async (accountId, callback) => {
  console.log(`Getting account overview for account id ${accountId}`);
  
  accountId = ObjectId(accountId);
  
  
  
  let account = await Account.
    find({_id: accountId});
 
  
  // create new overview object
  let accountOverview = Object.assign({}, account[0]._doc);
  
  // delete assigned _id field, to allow a new _id generated by new overview
  delete accountOverview["_id"];
  
  // reassign createdAt to accountCreatedAt
  accountOverview['accountCreatedAt'] = accountOverview.createdAt;
  delete accountOverview["createdAt"];
  
  // create account_id field and assign _id
  accountOverview["account_id"] = accountId;
  
  // get all cases ids for the account id
  let cases = await Case.
    find({account_id: accountId}, "_id");

 
  let numberOfCases = cases.length
    
  // add number of cases to accountOverview  
  accountOverview["numberOfCases"] = numberOfCases;
    
  let numberOfUsers = await User.
    find({account_id: accountId}).
    count().
    then( (result) => {
      return result
    }).
    catch( (err) => {
      console.log(err);
    })
  
  // add number of users to accountOverview
  accountOverview["numberOfUsers"] = numberOfUsers;
  
  
  let casesIds = cases.map( (element) => {
    return element._id
  })

  
  // get number of messages for each case related to a single account
  let messageCount =  await Message.
    find({case_id: {$in: casesIds}}).
    count()
        
  // add number of messages to accountOverview
  accountOverview["numberOfMessages"] = messageCount;
  
  
  console.log('accountOverview', accountOverview)
  
  
  
  // SAVE NEW ACCOUNT OVERVIEW TO DB
  
  await saveAccountOverview(accountOverview, (err, data) => {
    if (err) {
      callback(err, null);
    } else {
      callback(null, data);
      
    }
  })
  
}


module.exports = {
  db,
  getAllAccountOverviews,
  saveAccountOverview,
  getAllAccountIds,
  getAccountById,
  getCasesByAccountId,
  getUsersByAccountId,
  getMessagesByAccountId,
  getAccountOverviewById
};



